unit Unit10;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ExtCtrls, EA_TLB, EA_Ideas_Lib;

type
  TForm10 = class(TForm)
    Panel1: TPanel;
    Memo1: TMemo;
    Button1: TButton;
    procedure FormShow(Sender: TObject);
    procedure Button1Click(Sender: TObject);
  private
    { Private declarations }
  public
    rep : iDualRepository;
    package : iDualPackage;
    { Public declarations }
  end;

var
  Form10: TForm10;

implementation

{$R *.dfm}

procedure TForm10.Button1Click(Sender: TObject);
begin
  close;
end;

procedure TForm10.FormShow(Sender: TObject);
var
  elements : tStringList;
  connectors : iDualCollection;
  myConn : iDualConnector;
  errors : tStrings;
  i, j : integer;
  myElem : tElemHolder;
begin
  if (rep <> nil) and (package <> nil) then
  begin
    errors := memo1.Lines;
    errors.Add('------Initial Checks on Package------');
    doInitialChecks(rep,package,errors);
    errors.Add('');
    errors.Add('------Checking all Elements------');
    elements := tStringlist.Create;
    getElementsInPackage(package,elements,'',rep,true);
    if elements.Count > 0 then
    for i := 0 to elements.Count - 1 do
    begin
      myElem := elements.Objects[i] as tElemHolder;
      checkElem(rep,myElem,errors,false);
      connectors := myElem.element.Connectors;
      if connectors.Count > 0 then
      for j := 0 to connectors.Count - 1 do
      begin
        myConn := connectors.GetAt(j) as iDualConnector;
        checkConnector(rep,myElem,myConn,errors);
      end;
    end;
  end;
end;

end.
