// ************************************************************************ //
// WARNING
// -------
// This file is generated by the Type Library importer or Type Libary Editor.
// Barring syntax errors, the Editor will parse modifications made to the file.
// However, when applying changes via the Editor this file will be regenerated
// and comments or formatting changes will be lost.
// ************************************************************************ //
// File generated on 29/06/2010 21:01:36 (- $Rev: 12980 $, 132755680).

[
  uuid(09172305-C64F-46C5-AC65-2DDAFBE5DEAE),
  version(1.0),
  helpstring("IdeasAddIn Library"),
  control

]
library IdeasAddIn
{

  importlib("stdole2.tlb");

  interface IAddIn;
  coclass AddIn;
  interface IIdeasForm;
  dispinterface IIdeasFormEvents;
  coclass IdeasForm;


  [
    uuid(B9B480AF-9776-44E7-87C2-3CFF1FC83CCE),
    version(1.0)
  ]
  enum TxActiveFormBorderStyle
  {
    [helpstring("afbNone")]
    afbNone = 0,
    [helpstring("afbSingle")]
    afbSingle = 1,
    [helpstring("afbSunken")]
    afbSunken = 2,
    [helpstring("afbRaised")]
    afbRaised = 3
  };

  [
    uuid(ED22774E-482A-4B1C-9257-B8457D7155F5),
    version(1.0)
  ]
  enum TxPrintScale
  {
    [helpstring("poNone")]
    poNone = 0,
    [helpstring("poProportional")]
    poProportional = 1,
    [helpstring("poPrintToFit")]
    poPrintToFit = 2
  };

  [
    uuid(6E125409-1FCF-4EA8-9CD9-29A474005933),
    version(1.0)
  ]
  enum TxMouseButton
  {
    [helpstring("mbLeft")]
    mbLeft = 0,
    [helpstring("mbRight")]
    mbRight = 1,
    [helpstring("mbMiddle")]
    mbMiddle = 2
  };

  [
    uuid(E28D3882-70A7-43D6-876B-1D68372943DC),
    version(1.0)
  ]
  enum TxPopupMode
  {
    [helpstring("pmNone")]
    pmNone = 0,
    [helpstring("pmAuto")]
    pmAuto = 1,
    [helpstring("pmExplicit")]
    pmExplicit = 2
  };

  [
    public
  ]
  typedef IFontDisp** PPUserType1;

  [
    custom(8B342977-45CB-4A01-A8F2-E47B61F3539E, 0)
  ]
  typedef IFontDisp** PPUserType2;

  [
    uuid(229E35FA-65BA-4E87-8CAF-5476140FF19C),
    version(1.0),
    helpstring("Dispatch interface for AddIN Object"),
    dual,
    oleautomation
  ]
  interface IAddIn: IDispatch
  {
    [id(0x000000C9)]
    HRESULT _stdcall EA_Connect([in]  IDispatch* Repository, [out, retval] BSTR* Value);
    [id(0x000000CA)]
    HRESULT _stdcall EA_Disconnect(void);
    [id(0x000000CB)]
    HRESULT _stdcall EA_GetMenuItems([in]  IDispatch* Repository, [in] BSTR Location, [in] BSTR MenuName, [out, retval] VARIANT* Value);
    [id(0x000000CC)]
    HRESULT _stdcall EA_GetMenuState([in]  IDispatch* Repository, [in] BSTR Location, [in] BSTR MenuName, [in] BSTR ItemName, [in, out] VARIANT_BOOL* IsEnabled, [in, out] VARIANT_BOOL* IsChecked);
    [id(0x000000CD)]
    HRESULT _stdcall EA_MenuClick([in]  IDispatch* Repository, [in] BSTR Location, [in] BSTR MenuName, [in] BSTR ItemName);
    [id(0x000000CE)]
    HRESULT _stdcall EA_ShowHelp([in]  IDispatch* Repository, [in] BSTR Location, [in] BSTR MenuName, [in] BSTR ItemName);
    [id(0x000000CF)]
    HRESULT _stdcall EA_OnContextItemChanged([in]  IDispatch* Repository, [in] BSTR GUID, [in] VARIANT ot);
    [id(0x000000D0)]
    HRESULT _stdcall exportRDF(void);
    [id(0x000000D1)]
    HRESULT _stdcall populateDB(void);
    [id(0x000000D2)]
    HRESULT _stdcall individualType(void);
    [id(0x000000D3)]
    HRESULT _stdcall addGUIDs(void);
    [id(0x000000D4)]
    HRESULT _stdcall EA_FileOpen([in]  IDispatch* Repository);
    [id(0x000000D5)]
    HRESULT _stdcall exportOracle(void);
    [id(0x000000D6)]
    HRESULT _stdcall diagsToIdeas(void);
    [id(0x000000D7)]
    HRESULT _stdcall EA_OnPostNewElement([in]  IDispatch* Repository, [in]  IDispatch* Info, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D8)]
    HRESULT _stdcall EA_OnPostNewConnector([in]  IDispatch* Repository, [in]  IDispatch* Info, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000D9)]
    VARIANT_BOOL _stdcall EA_OnContextItemDoubleClicked([in]  IDispatch* Repository, [in] BSTR GUID, [in] VARIANT ot);
    [id(0x000000DA)]
    HRESULT _stdcall EA_OnPreNewElement([in]  IDispatch* Repository, [in]  IDispatch* Info, [out, retval] VARIANT_BOOL* Value);
  };

  [
    uuid(B1BD4841-DEAA-4C27-8096-D4BAF4826CCF),
    version(1.0),
    helpstring("Dispatch interface for IdeasForm Control"),
    dual,
    oleautomation
  ]
  interface IIdeasForm: IDispatch
  {
    [propget, id(0x000000C9), hidden]
    HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000C9), hidden]
    HRESULT _stdcall Visible([in] VARIANT_BOOL Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall AutoScroll([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall AutoScroll([in] VARIANT_BOOL Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall AutoSize([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall AutoSize([in] VARIANT_BOOL Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall AxBorderStyle([out, retval] enum TxActiveFormBorderStyle* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall AxBorderStyle([in] enum TxActiveFormBorderStyle Value);
    [propget, id(0xFFFFFDFA)]
    HRESULT _stdcall Caption([out, retval] BSTR* Value);
    [propput, id(0xFFFFFDFA)]
    HRESULT _stdcall Caption([in] BSTR Value);
    [propget, id(0xFFFFFE0B)]
    HRESULT _stdcall Color([out, retval] OLE_COLOR* Value);
    [propput, id(0xFFFFFE0B)]
    HRESULT _stdcall Color([in] OLE_COLOR Value);
    [propget, id(0xFFFFFE00)]
    HRESULT _stdcall Font([out, retval] IFontDisp** Value);
    [propput, id(0xFFFFFE00)]
    HRESULT _stdcall Font([in] IFontDisp* Value);
    [propputref, id(0xFFFFFE00)]
    HRESULT _stdcall Font([in] IFontDisp** Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall KeyPreview([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall KeyPreview([in] VARIANT_BOOL Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall PixelsPerInch([out, retval] long* Value);
    [propput, id(0x000000CE)]
    HRESULT _stdcall PixelsPerInch([in] long Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall PrintScale([out, retval] enum TxPrintScale* Value);
    [propput, id(0x000000CF)]
    HRESULT _stdcall PrintScale([in] enum TxPrintScale Value);
    [propget, id(0x000000D0)]
    HRESULT _stdcall Scaled([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000D0)]
    HRESULT _stdcall Scaled([in] VARIANT_BOOL Value);
    [propget, id(0x000000D1), hidden]
    HRESULT _stdcall Active([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x000000D2), hidden]
    HRESULT _stdcall DropTarget([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000D2), hidden]
    HRESULT _stdcall DropTarget([in] VARIANT_BOOL Value);
    [propget, id(0x000000D3), hidden]
    HRESULT _stdcall HelpFile([out, retval] BSTR* Value);
    [propput, id(0x000000D3), hidden]
    HRESULT _stdcall HelpFile([in] BSTR Value);
    [propget, id(0x000000D4), hidden]
    HRESULT _stdcall PopupMode([out, retval] enum TxPopupMode* Value);
    [propput, id(0x000000D4), hidden]
    HRESULT _stdcall PopupMode([in] enum TxPopupMode Value);
    [propget, id(0x000000D5), hidden]
    HRESULT _stdcall ScreenSnap([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000D5), hidden]
    HRESULT _stdcall ScreenSnap([in] VARIANT_BOOL Value);
    [propget, id(0x000000D6), hidden]
    HRESULT _stdcall SnapBuffer([out, retval] long* Value);
    [propput, id(0x000000D6), hidden]
    HRESULT _stdcall SnapBuffer([in] long Value);
    [propget, id(0x000000D7), hidden]
    HRESULT _stdcall DockSite([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000D7), hidden]
    HRESULT _stdcall DockSite([in] VARIANT_BOOL Value);
    [propget, id(0x000000D8), hidden]
    HRESULT _stdcall DoubleBuffered([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000D8), hidden]
    HRESULT _stdcall DoubleBuffered([in] VARIANT_BOOL Value);
    [propget, id(0x000000D9), hidden]
    HRESULT _stdcall AlignDisabled([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x000000DA), hidden]
    HRESULT _stdcall MouseInClient([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x000000DB), hidden]
    HRESULT _stdcall VisibleDockClientCount([out, retval] long* Value);
    [propget, id(0x000000DC), hidden]
    HRESULT _stdcall UseDockManager([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000DC), hidden]
    HRESULT _stdcall UseDockManager([in] VARIANT_BOOL Value);
    [propget, id(0xFFFFFDFE), hidden]
    HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* Value);
    [propput, id(0xFFFFFDFE), hidden]
    HRESULT _stdcall Enabled([in] VARIANT_BOOL Value);
    [propget, id(0x000000DD), hidden]
    HRESULT _stdcall ExplicitLeft([out, retval] long* Value);
    [propget, id(0x000000DE), hidden]
    HRESULT _stdcall ExplicitTop([out, retval] long* Value);
    [propget, id(0x000000DF), hidden]
    HRESULT _stdcall ExplicitWidth([out, retval] long* Value);
    [propget, id(0x000000E0), hidden]
    HRESULT _stdcall ExplicitHeight([out, retval] long* Value);
    [propget, id(0x000000E1)]
    HRESULT _stdcall AlignWithMargins([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000E1)]
    HRESULT _stdcall AlignWithMargins([in] VARIANT_BOOL Value);
    [id(0x000000E2)]
    HRESULT _stdcall ClearErrors(void);
    [id(0x000000E3)]
    HRESULT _stdcall AddError([in] BSTR error);
    [id(0x000000E4)]
    HRESULT _stdcall GetReservedWords([out, retval] BSTR* reservedWords);
    [id(0x000000E5)]
    HRESULT _stdcall Recurse([out, retval] VARIANT_BOOL* Recurse);
    [id(0x000000E6)]
    HRESULT _stdcall ResetDirections([out, retval] VARIANT_BOOL* rd);
    [id(0x000000E7)]
    HRESULT _stdcall FoundationIncluded([out, retval] VARIANT_BOOL* fi);
    [id(0x000000E8)]
    HRESULT _stdcall FillInSuperSub([out, retval] VARIANT_BOOL* fi);
    [id(0x000000E9)]
    HRESULT _stdcall ExcludeText([out, retval] BSTR* et);
    [id(0x000000EA)]
    HRESULT _stdcall CreateNames([out, retval] VARIANT_BOOL* cn);
    [id(0x000000EB)]
    HRESULT _stdcall RenameNonUnique([out, retval] VARIANT_BOOL* rnu);
    [id(0x000000EC)]
    HRESULT _stdcall SetStereotypes([out, retval] VARIANT_BOOL* ss);
    [id(0x000000ED)]
    HRESULT _stdcall DefaultStereotype([out, retval] BSTR* ds);
    [id(0x000000EE)]
    HRESULT _stdcall SetURL([in] BSTR URL);
    [id(0x000000EF)]
    HRESULT _stdcall EnableRDFButton(void);
    [id(0x000000F0)]
    HRESULT _stdcall DisableRDFButton(void);
    [id(0x000000F1)]
    HRESULT _stdcall setRepository([in]  IDispatch* Repository);
    [id(0x000000F2)]
    HRESULT _stdcall setAddIn([in]  IDispatch* newAddIn);
    [id(0x000000F3)]
    HRESULT _stdcall getURL([out, retval] BSTR* et);
  };

  [
    uuid(8534A88C-501E-40E6-98FF-7C85C9919B70),
    version(1.0),
    helpstring("Events interface for IdeasForm Control")
  ]
  dispinterface IIdeasFormEvents
  {
    properties:
    methods:
    [id(0x000000C9)]
    void OnActivate(void);
    [id(0x000000CA)]
    void OnClick(void);
    [id(0x000000CB)]
    void OnCreate(void);
    [id(0x000000CC)]
    void OnDblClick(void);
    [id(0x000000CD)]
    void OnDestroy(void);
    [id(0x000000CE)]
    void OnDeactivate(void);
    [id(0x000000CF)]
    void OnKeyPress([in, out] short* Key);
    [id(0x000000D0)]
    void OnMouseEnter(void);
    [id(0x000000D1)]
    void OnMouseLeave(void);
    [id(0x000000D2)]
    void OnPaint(void);
  };

  [
    uuid(B4889183-1C9E-480D-AF90-D826022AA7CA),
    version(1.0),
    helpstring("AddIN Object")
  ]
  coclass AddIn
  {
    [default] interface IAddIn;
  };

  [
    uuid(AECE0DB4-6075-4F30-AFBD-F6FB129D240F),
    version(1.0),
    helpstring("IdeasForm Control"),
    control
  ]
  coclass IdeasForm
  {
    [default] interface IIdeasForm;
    [default, source] dispinterface IIdeasFormEvents;
  };

};
